#include "zsmplayer.h"
#include "files.h"
#include <conio.h>
#include <cbm.h>

#define NUM_QUALITY 6
#define NUM_SOUNDS 14
#define NUM_SONGS 9

#define ZSMBANK 1
#define ZCMBANK 0x18

#define CLEAR_INPUT while(kbhit()) cgetc();
#define SHOW_DIR(NAME) \
gotoxy(12,3);  \
cprintf("%-20s",(NAME)); \



// because cbm.h's waitvsync() is broken
extern void __fastcall__ vsync();
extern void chdir(const char* dirname);
extern void install_irq();
extern void remove_irq();

struct {
  digitab* addr[NUM_QUALITY][NUM_SOUNDS];
  unsigned char bank[NUM_QUALITY][NUM_SOUNDS];
  unsigned long size[NUM_QUALITY][NUM_SOUNDS];
} sounds;

char current_sound;
char current_song;
char current_quality;
char music_playing;
char music_loading;

unsigned long songsize[NUM_SONGS] = {
  187886,113061,96712,69166,101333,146480,138774,1706,910
};

const char* dir[NUM_QUALITY] = {
  "zcmorig", "zcm22k16", "zcm8k16", "zcm22k8", "zcm16k8", "zcm8k8"
//  "zcm8k16", "zcm22k8"
};
const char* qual[NUM_QUALITY] = {
  "48khz 16bit", "22khz 16bit", "8khz 16bit", "22khz 8bit", "16khz 8bit",
  "8khz 8bit"
//  "8khz 16bit", "22khz 8bit"
};

const char* qualshort[NUM_QUALITY] = {
  "48khz", "22khz", " 8khz", "22khz", "16khz", " 8khz"
};

const char* zcmname[NUM_SOUNDS] = {
  "beep2.zcm","beep.zcm","cycle.item.zcm","cycle.weapon.zcm",
  "door.zcm","emp.zcm","error.zcm","found.item.zcm","magnet2.zcm",
  "magnet.zcm","medkit.zcm","move.zcm","plasma.zcm","shock.zcm"
};

const char* zsmname[NUM_SONGS] = {
  "main.zsm", "levela.zsm", "levelb.zsm", "levelc.zsm",
  "leveld.zsm", "levele.zsm", "levelf.zsm", "win.zsm",
  "lose.zsm"
};

const char* soundname[NUM_SOUNDS] = {
  "beep 2", "beep", "cycle item", "cycle weapon", "door", "emp",
  "error", "found item", "magnet 2", "magnet", "medkit", "move",
  "plasma", "shock"
};

const char* songname[NUM_SONGS] = {
  "main theme", "level a", "level b", "level c", "level d",
  "level e", "level f", "you win", "you lose"
};

const char fkey_map[8] = { 0, 2, 3, 5, 1, 9, 4, 0};
                      //  F1 F3 F5 F7 F2 F4 F6 F8
                      //  85 86 87 88 89 8A 8B 8C

void print_songlist() {
  #define SONGX 42
  #define SONGY 10
  #define SONGNAME "%-12s"
  #define LOADX 15
  #define LOADY 0

  char i;

  for (i=0 ; i<NUM_SONGS ; i++) {
    gotoxy(SONGX,SONGY+i);
    cprintf("%u: ",i+1);
    if (i==current_song) {
      revers(1);
      if (music_playing)
        textcolor(COLOR_LIGHTGREEN);
      if (music_loading)
        textcolor(COLOR_ORANGE);
      cprintf(SONGNAME,songname[i]);
      cprintf(" %6lu bytes",songsize[i]);
      revers(0);
      if (music_loading)
        cprintf(" loading");
      else
        cprintf("        ");
      textcolor(COLOR_WHITE);
    }
    else {
      cprintf(SONGNAME,songname[i]);
      cprintf(" %6lu bytes",songsize[i]);
    }
    revers(0);
    textcolor(COLOR_WHITE);
  }
  gotoxy(SONGX,wherey()+2);
  cprintf("press backspace to toggle music");
}

void print_soundlist() {
  #define SOUNDX 0
  #define SOUNDY 10
  #define SOUNDNAME "%-12s"

  char i;
  gotoxy(SOUNDX,SOUNDY);
  for (i=0 ; i<NUM_SOUNDS ; i++) {
    cprintf("%c: ",'a'+i);
    if (i==current_sound)
      revers(1);
    cprintf(SOUNDNAME,soundname[i]);
    revers(0);
    cprintf (" %6lu bytes",sounds.size[current_quality][i]);
//    cprintf("%02x %04x %6lu      ",
//      sounds.bank[current_quality][i],
//      (uint16_t)sounds.addr[current_quality][i],
//      sounds.size[current_quality][i]
//    );
    gotoxy(SOUNDX,wherey()+1);
  }
  gotoy(wherey()+1);
  cprintf ("press enter to replay sound effect");
}

void print_quality() {
  char i;

  gotoxy(0,5);
  cprintf("%14s","play quality: ");
  gotoxy(7,6);
  cprintf("16bit: ");
  gotoxy(7,7);
  cprintf(" 8bit: ");
  gotoxy(14,6);
  #define QS "f%d:%-5s"
  for(i=0 ; i<NUM_QUALITY ; i++) {
    if (i==current_quality)
      revers(1);
    if (i<3) cprintf(QS,i+1,qualshort[i]);
      else cprintf(QS,i+2,qualshort[i]);
    revers(0);
    cprintf("    ");
    if(i==2) gotoxy(14,7);
  }

}

void screen_init() {
  uint8_t i;
  videomode(VIDEOMODE_80x30);
  clrscr();
  cbm_k_bsout(CH_FONT_UPPER);
  gotoxy (0,0);
  cprintf("media jukebox");
  gotoxy (0,1);
  for (i=0 ; i<80 ; i++) cputc('-');

  gotoxy(0,3);
  cprintf("directory: /");
}

char* bload(const char* filename,const char* address) {
  // loads with current HiRAM bank = the one we want.
  // Even if it's not, it's the one we're gonna get! :)
	cbm_k_setnam(filename);
	cbm_k_setlfs(0,8,2);
	return (char*)cbm_k_load(0,(uint16_t)address);
}

void music_looped(uint8_t playing, uint8_t remaining) {
  if (!playing) {
    music_playing = 0;
    print_songlist();
  }
}

void load_pcm() {
  char i, j, b;
  digitab* tmp;
  char ok=1;

  unsigned char bank = ZCMBANK;
  char* buff = (char*)0xa000;
  RAM_BANK = ZCMBANK;
  for (i=0 ; i<NUM_QUALITY ; i++) {
    chdir(dir[i]);
    SHOW_DIR(dir[i]);
    gotoxy(LOADX,LOADY);
    cprintf("loading:");
    for (j=0;j<NUM_SOUNDS;j++) cprintf("%c",'.');
    gotox(wherex()-1);
    for (j=0 ; j<NUM_SOUNDS ; j++) {
      sounds.addr[i][j]=(digitab*)buff;
      sounds.bank[i][j]=RAM_BANK;
      buff = bload(zcmname[j],buff);
      if (RAM_BANK < sounds.bank[i][j]) {
        gotoxy(15,0);
        cprintf("bank wrap on zcm %d %d",i,j);
        CLEAR_INPUT;
        while(!kbhit()) {};
        CLEAR_INPUT;
      }
      sounds.size[i][j] = (unsigned long)0x2000 * (RAM_BANK-sounds.bank[i][j]+1);
      sounds.size[i][j] -= 0xc000-(uint16_t)buff;
      sounds.size[i][j] -= (uint16_t)sounds.addr[i][j] - 0xa000;

      cputc(' ');
      gotox(wherex()-2);
      b=RAM_BANK;
      RAM_BANK=sounds.bank[i][j];
      tmp=(digitab*)sounds.addr[i][j];
      tmp->bank=RAM_BANK;
      tmp->pcmdata=(uint8_t*)tmp+8;
      RAM_BANK=b;
    }
    chdir("..");
  }
  gotoxy(LOADX,LOADY);
  for (i=wherex(); i<80 ; i++) cprintf(" ");
}

void load_song(char id) {
  if (id>=NUM_SONGS) return;
  music_loading = 1;
  chdir("/zsm");
  SHOW_DIR("zsm");
  if (music_playing)
    zsm_stopmusic();
  print_songlist();
  RAM_BANK = ZSMBANK;
  bload(zsmname[id],(char*)0xa000);
  music_loading = 0;
  if (music_playing)
    zsm_startmusic(ZSMBANK,0xa000);
  print_songlist();
}

void init() {
  screen_init();
  zsm_init();
  zsm_setcallback(&music_looped);
  pcm_init();
  load_pcm();
  print_quality();
  print_soundlist();
  load_song(0);
  print_songlist();
  install_irq();
  current_song=0;
  current_sound=0;
  current_quality=0;
  music_playing=0;
  music_loading=0;
}

void main() {
  char key;
  char run=1;
  init();
  CLEAR_INPUT;
  while(run) {
    if(kbhit()) {
      key=cgetc();
//      gotoxy (78,0);
//      cprintf("%02x",key);
      if ((key >= CH_F1) && (key < CH_F8)) {
        key = fkey_map[key-CH_F1];
        if (key > NUM_QUALITY) continue;
        if (current_quality != key) {
          current_quality = key;
          print_soundlist();
          print_quality();
        }
        key=CH_ENTER;
      }
      if ((key >= 'a') && (key < 'a'+NUM_SOUNDS)) {
        key -= 'a';
        if (key!=current_sound) {
          current_sound = key;
          print_soundlist();
        }
        key=CH_ENTER;
      }
      if ((key >= '1') && (key < '1'+NUM_SONGS)) {
        key -= '1';
        if (key != current_song) {
          current_song = key;
          music_playing = 1;
//          key=music_playing; // use key as tmp to hold true state...
//          music_playing=0;
// //          print_songlist();
//          music_playing=key;
          load_song(current_song);
          if (music_playing) print_songlist();
          key = 0;
          CLEAR_INPUT;
        }
        else
          key = CH_DEL; // just toggle
      }
      switch (key) {
      case CH_DEL:
        if (!music_playing) {
          zsm_startmusic(ZSMBANK,0xA000);
          music_playing=1;
        }
        else {
          zsm_stopmusic();
          music_playing=0;
        }
        print_songlist();
        break;
      case CH_STOP:
        run=0;
        break;
      case ' ':
        pcm_stop();
        zsm_stopmusic();
        music_playing = 0;
        print_songlist();
        break;
      case CH_ENTER:
        pcm_trigger_digi(
          sounds.bank[current_quality][current_sound],
          (uint16_t)sounds.addr[current_quality][current_sound]
        );
      default:
        break;
      }
    }
  }
  remove_irq();
  zsm_stopmusic();
  pcm_stop();
  gotoxy(0,29);
}
